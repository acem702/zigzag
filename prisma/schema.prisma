// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  postVotes     PostVote[]
  commentVotes  CommentVote[]
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  content   String     @db.VarChar(200)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  latitude  Float?
  longitude Float?
  comments  Comment[]
  votes     PostVote[]
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  content   String        @db.VarChar(200)
  latitude  Float?
  longitude Float?
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String
  votes     CommentVote[]
}

model PostVote {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  rating Int    @db.SmallInt

  @@unique([postId, userId], map: "PostVote_postId_userId_unique_constraint")
}

model CommentVote {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  rating    Int     @db.SmallInt

  @@unique([commentId, userId], map: "CommentVote_commentId_userId_unique_constraint")
}
